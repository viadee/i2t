/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package Powrmart.validation;

import Powrmart.ATTRIBUTEType;
import Powrmart.CONFIGREFERENCEType;
import Powrmart.FAILPARENTIFINSTANCEDIDNOTRUNType;
import Powrmart.FAILPARENTIFINSTANCEFAILSType;
import Powrmart.ISENABLEDType1;
import Powrmart.RESOURCEREFERENCEType;
import Powrmart.REUSABLEType2;
import Powrmart.SESSIONCOMPONENTType;
import Powrmart.SESSIONEXTENSIONType;
import Powrmart.TRANSFORMRESOURCEREFType;
import Powrmart.TREATINPUTLINKASANDType;
import Powrmart.VALUEPAIRType;
import Powrmart.WORKFLOWVARIABLEType;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.util.FeatureMap;

/**
 * A sample validator interface for {@link Powrmart.TASKINSTANCEType}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface TASKINSTANCETypeValidator {
    boolean validate();

    boolean validateATTRIBUTE(EList<ATTRIBUTEType> value);
    boolean validateWORKFLOWVARIABLE(EList<WORKFLOWVARIABLEType> value);
    boolean validateVALUEPAIR(EList<VALUEPAIRType> value);
    boolean validateCONFIGREFERENCE(CONFIGREFERENCEType value);
    boolean validateSESSIONCOMPONENT(EList<SESSIONCOMPONENTType> value);
    boolean validateSESSIONEXTENSION(EList<SESSIONEXTENSIONType> value);
    boolean validateGroup(FeatureMap value);
    boolean validateRESOURCEREFERENCE(EList<RESOURCEREFERENCEType> value);
    boolean validateTRANSFORMRESOURCEREF(EList<TRANSFORMRESOURCEREFType> value);
    boolean validateDESCRIPTION(Object value);
    boolean validateFAILPARENTIFINSTANCEDIDNOTRUN(FAILPARENTIFINSTANCEDIDNOTRUNType value);
    boolean validateFAILPARENTIFINSTANCEFAILS(FAILPARENTIFINSTANCEFAILSType value);
    boolean validateISENABLED(ISENABLEDType1 value);
    boolean validateNAME(Object value);
    boolean validateREUSABLE(REUSABLEType2 value);
    boolean validateSERVEROVERRIDE(Object value);
    boolean validateTASKNAME(Object value);
    boolean validateTASKTYPE(Object value);
    boolean validateTREATINPUTLINKASAND(TREATINPUTLINKASANDType value);
}
